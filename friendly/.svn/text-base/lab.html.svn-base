<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang=en lang=en>
<HEAD>
	<meta http-equiv=content-type content="text/html; charset=utf-8" />
	<link rel=stylesheet href="main.css" type="text/css" />
<title>Lab 3: Networking</title>
</HEAD>
<BODY>


<h1>Lab 3: Networking</h1>
<div style="font-weight: bold">6.005 Elements of Software Construction<br>
Spring 2011 - Due: Friday, April 8th</div>

<p>In this lab, you will get a blazing-fast, learn-by-doing
introduction to aspects of Java's I/O, networking, and threading API,
to help you get started building network applications.


<h2>Before Lab</h2>

<p>Before starting to work on the lab, please do check out
the <tt>friendly</tt> project from your personal SVN repository.

<p>
<b>Windows Users:</b> Make sure you have Telnet installed on your computer before the Lab. 
Telnet may not be installed by default for you. Please check by running "Telnet" in the 
command line (or searching for it from the Start Menu), and in case you do not have it, install Telnet via 
Control Panel ---> Programs and Features ---> Turn windows features on/off ---> 
Telnet client.

<p>
Also note that for Windows, 'telnet localhost 4444' should be replaced with 'open localhost 4444'.


<h2>Friendly</h2>

<p>Our starting point will be a small program called Friendly. The
program takes input that the user types and prints out canned
responses, until the user types `<tt>bye</tt>', at which point the
program terminates. Here is an example run of the program (lines
preceded by "<tt>&gt</tt>" represent input typed by the user)

<div class="code"><pre>
Hello, my friend! How are you today?
> Just ok.
I see. Why is that?
> Hard day at work.
I see. Why is that?
> Is that all you ever say?
Interesting question.
> Bye.
Well, bye then.
</pre></div>


<p><img src="hammer.gif"> <b>Run
<tt>friendly.Main</tt>.</b>  The program will start
running. You can interact with the program in Eclipse's
<tt>Console</tt> window. Try out the
program by going through an interaction like the one shown above.

<p><img src="book.gif" width="40"> <b>Inspect the source code of
<tt>friendly.Main</tt>.</b> Notice that to read the input from the
console, we use <a
href="http://java.sun.com/javase/6/docs/api/java/io/BufferedReader.html"><tt>java.io.BufferedReader.</tt></a>
Buffered readers will come in handy later, and also during your
project, so take a moment to see how they are used in Friendly. In
particular, note the following usage pattern:

<center><b>Pattern for repeatedly reading text lines from some source
using a BufferedReader.</b></center>
<div class="code"><pre>  

  // Create a reader.
  BufferedReader reader = new BufferedReader(...);

  try {

      // Read first line.
      String line = reader.readLine();

      while (line != null) { // line == null means stream end reached

          // Process the line
          ...

          // Read next line.
          line = reader.readLine();

    } catch (IOException e) {
     // Error while reading. Deal with the error.
  }
</pre></div>

<p>Note that a common mistake when applying this pattern is to forget
to put <tt>readLine()</tt> at the end of the loop, which leads to an
infinite loop.

<h2>Adding more canned responses</h2>

<p> This task will augment Friendly's conversational repertoire as
follows:

<center>
<table border="1">
  <tr><td><b>User types...</b></td><td><b>Friendly responds...</b></td></tr>
  <tr><td><tt>I think it's going to rain today.</tt></td><td><tt>Nonsense! Let's go to the beach.</tt></td></tr>
  <tr><td><tt>What's happening?</tt></td><td><tt>We need to talk about your TPS reports.</tt></td></tr>
  <tr><td><tt>I think I'm gonna lose it.</tt></td><td><tt>Uh-oh. Sounds like somebody's got a case of the Mondays.</tt></td></tr>
</table>
</center>

<p>We could hardcode the responses as a bunch of if-then clauses
(similarly to the if-clauses that Friendly uses to differentiate
questions from non-questions). A better way of doing it is using a
map.

<p><img src="book.gif" width="40"> <b>Read the API for
<a href="http://java.sun.com/javase/6/docs/api/java/util/Map.html"><tt>java.util.Map</tt></a></b>.

<p><img src="hammer.gif"> <b>Add the above canned responses to
FriendlyServer.</b> Use a <a href="http://java.sun.com/javase/6/docs/api/java/util/LinkedHashMap.html"><tt>java.util.LinkedHashMap</tt></a>
(one of the implementations of <tt>Map</tt> that Sun provides) to store the input/response
pairs. Test that the program works as intended. Below is a template
that you can use to follow your code.

<div class="code"><pre>
package friendly;
.....
public class FriendlyServer {

  public static void start() {

      Map&lt;String,String&gt; cannedResponses = new LinkedHashMap&lt;String, String&gt;();
      cannedResponses.put(...);
      cannedResponses.put(...);
      cannedResponses.put(...);
      .....

         while (line != null) {
         .....

         // TODO: If a canned response matches line, output response.

         .....

         }
  }
}
</div></pre>

<h2>Sockets: Friendly over the network</h2>

<p> You can't imagine living without Friendly, and now you want to
share it with your friends. You decide to extend Friendly so that
anyone can access it over the network.

<p>The basic logic of the program will stay unchanged. The difference
is that instead of reading input from the console
(<tt>System.in</tt>), the program will read its input from a network
<b>socket</b>, and instead of writing its output to the console
(<tt>System.out</tt>), it will write to the socket.

<p><img src="book.gif" width="40"> <b>Read the page <a
href="http://java.sun.com/docs/books/tutorial/networking/sockets/definition.html">What
Is a Socket?</a> in the Java tutorial.</b> You don't need to read beyond the first page, unless you want to.

<p><img src="book.gif" width="40"> <b>Take a look at the program
<tt>frienldy.socket.Example</tt>.</b> It is a simple program that listens in a
specific port of your machine for a connection and echoes back the
first line of input it receives.

<p><img src="hammer.gif"> <b>Run <tt>friendly.socket.Example</tt>.</b> The program
will print the following message to the console, and then wait for an
incoming connection. 

<div class="code"><pre>
Accepting connections on port 4444...
</pre></div>

<p>If you received the following message: <div class="code"><pre>
"Could not listen on port: 4444."
</pre></div> You should change the port number to a different number on all the provided classes.</p>


Without terminating the server, open a command prompt in your 
operating system. Connect to the server as follows:

<div class="code"><pre>
> telnet localhost 4444
Connected to server. Type a line of input followed by the ENTER key.
> Hello there
You said: Hello there
Closing connection... Connection to host lost.
</pre></div>

<p><img src="hammer.gif"> <b>Using <tt>friendly.socket.Example</tt> as a
guide, modify <tt>friendly.FriendlyServer and friendly.socket.Main</tt>  so that it works over a network connection.</b> You
can have Friendly listen on port 4444 on your machine. You should be
able to have an interaction with Friendly as before, except this time
over a network connection:

<div class="code"><pre>
> telnet localhost 4444
Hello, my friend! How are you today?
> Just ok.
I see. How come?
> Hard day at work.
I see. How come?
> Is that all you ever say?
Interesting question.
> Bye.
Well, bye then.

Connection to host lost.
</pre></div>

<p>In real use, your friends would use the hostname or IP address of your machine
rather than <tt>localhost</tt> (which refers to your machine). In
addition to an IP address, you would need to tell your friends the
port which the server uses, e.g. 4444.

<p><img src="hammer.gif"> <b>Run the <tt>FriendlyTest</tt> JUnit test.</b>  
Make sure you run your Friendly server first <tt>(friendly.socket.Main)</tt>. 
This test acts as a client, connecting to port 4444, sending some messages to the server, and checking Friendly's replies.

<h2>Constantly Friendly</h2>

<p> Word has spread about Friendly. You start getting complaints
from users that try to use Friendly but are denied a
connection. The problem with the current implementation is that it
after it services one user, the server terminates. If someone then
tries to connect using the port, it gets a message like the following.

<div class="code"><pre>
> telnet localhost 4444
Connecting to localhost... Could not open connection to the
host, on port 4444: Connection failed.
</pre></div>

<p><img src="hammer.gif"> <b>Modify Friendly so that after a user types
`bye', it closes the connection to the user <i>but</i> continues
accepting new connections, until the server is forcefully
terminated.</b> You'll know you succeeded if you can have two sequential
sessions without restarting the server, as shown below.
Implementation hint: wrap the server's functionality in a while-loop,
but avoid closing the server socket on each iteration.

<div class="code"><pre>
> telnet localhost 4444
Hello, my friend! How are you today?
> Bye.
Well, bye then.

Connection to host lost.
> telnet localhost 4444
Hello, my friend! How are you today?
</pre></div>

<p>Note that this new version of Friendly never terminates by itself, and two processes can't
listen to 4444 at the same time.  So whenever you want to run Friendly, you will have to make
sure any running Friendly process is stopped first.  In Eclipse, you can stop
a running process by clicking on the little red Stop button on the Console view toolbar.  You
can remove terminated processes from the console window by pressing the 'X' button to the
right.  If you don't close terminated processes, you might have running processes hiding
underneath them.


<h2>Threads: Multi-user Friendly</h2>

<p>As popularity mounts, you get a new kind of complaint. Users connect to Friendly but
wait a long time to get any response. You can reproduce the problem as follows. Start the
Friendly server. Use telnet to open a connection to it.

<div class="code"><pre>
> telnet localhost 4444
Hello, my friend! How are you today?
</pre></div>

<p>Now, open a second command shell, and try to connect to the server (this mimics a second user trying
to connect to Friendly). You will get no error message, but also no response, because the
server is busy interacting with the first telnet session. Now, exit the first telnet session (i.e. type `bye').
 Friendly will finally present the greeting message to the second
user.

<p>Friendly can currently support only one user at a time. In this task, you will augment Friendly
to support multiple users <i>concurrently,</i> through the use of <b>threads.</b>

<p><img src="book.gif" width="40"> <b>Read the first four pages in Sun's
<a
href="http://java.sun.com/docs/books/tutorial/essential/concurrency/index.html">
Java concurrency tutorial.</a></b> Do not read beyond the section
"Defining and Starting a Thread" (unless you want to).

<p>You will now finish implementing a multi-threaded version of
Friendly. This version is in package <tt>friendly.multi</tt>.

<p> <img src="book.gif" width="40"><b>Inspect
<tt>friendly.multi.Main</tt>.</b> Notice that, like the multi-run version
of Friendly, it also has a loop that calls
<tt>ServerSocket.accept()</tt> and then processes a user session. The
key difference is in that instead of handling the session itself, the
method creates a new thread object with a
<tt>FriendlyClientHandler</tt>, and starts the thread, which goes off
and manages the user interaction, leaving the main thread free to
accept new connections:

<div class="code"><pre>

    .....

    while (true) {
      // Wait until someone connects.
      Socket socket = serverSocket.accept();

      // Hand off the work to a new thread.
      FriendlyServer server = new FriendlyServer(reader, writer, socket);
	  Thread thread = new Thread(server);
	  thread.start();
    }
    .....

</pre></div>

<p><img src="hammer.gif"> <b>Fill in the body of the <tt>run</tt> method
in class <tt>friendly.FriendlyServer</tt>.</b>  This class implements the <a
href="http://java.sun.com/javase/6/docs/api/java/lang/Runnable.html">Runnable</a>
interface, used to create objects that run in separate
threads. Basically, you can think of the <tt>run</tt> method as the
new entry point for a Friendly user session. Move the required
functionality into the <tt>run</tt> method.

<p><img src="hammer.gif"> <b>Compile and run the new server.</b> Make sure
that the new program works as expected. You will know that it works if
you are able to run two concurrent telnet sessions of Friendly.

<div class="boxed">
<img src="check.gif" width="16" height="16"/><b>Checkpoint.</b>  Find a TA or LA or 
another member of the course staff, and demonstrate your 
working multi Friendly server to get checked off.
</div>

<h2>Conclusion</h2>

<p>You have learned some aspects about I/O, networking, and threads in
Java. The implementation of the network challenges of project 3 will be similar to the
implementation of Friendly where networking and multi-threading is concerned.

<p>This lab was partly inspired by Sun's <a href="http://java.sun.com/docs/books/tutorial/networking/sockets/index.html">Java sockets tutorial.</a> 
If you would like a second source to learn more about sockets, we recommend taking a look at it.

<h2>Commit Your Solution</h2>

<p>
This is the end of the lab.  Be sure to commit your solutions to your personal repository.

</body>
</html>
